1.流的概念和作用
	流	--->	1)代表	
					a:任何有能力（产出）数据的数据源对象
					b:任何有能力（接受）数据的数据源对象
				2)本质
					数据传输，根据数据传输特性将流抽象成各种类，方面更直观的进行数据操作
				3)作用
					为数据源和目的地建立一个传输通道
注：java将 输入输出抽象为流，就好像水管，将连个容器连接起来，流是一组有序的，有起点和终点的字节集合，是数据传输的总称或者抽象
	即数据在两设备间的传输称为流

2.java IO 所采用的模型
	java IO模型设计非常优秀，采用的是装饰着模式，按功能划分Stream，你可以动态的装配这些Stream，以便获得你需要的功能
例如，你需要一个具有缓冲的文件输入流，则应该组合使用FileInputStream和BufferedInputStream

3.IO流的分类
	根据处理数据类型的不同分为：字节流和字符流
	根据数据流向的不同分为：输入流和输出流
	
	流序列中的数据既可以是未加工的原始二进制数据，也可以是经一点编码处理后符合某种格式规定的特定数据
		1)字节流：数据流中最小的数据单元是字节
		2)字符流：数据流中最小的数据单元是字符，Java中的字符是Unicode编码，一个字符占用两个字节
	
		3)输入流：程序从输入流读取数据源。数据源包括外界（键盘、文件、网络...），即是将数据源读入到程序的通信通道
		4)输出流：程序向输出流写入数据。将程序中的数据输出到外界（显示器，打印机，文件，网络...）的通信通道
	采用数据流的目的就是使得输出输入独立于设备
		输入流（Input Stream）不关心数据源来自何种设备
		输出流（Output Stream）不关心数据的目的是何种设备
3.流的特性
	1)先进先出，最先被写入输出流的数据最先被输入流读取到
	2)顺序读取，可以一个接一个地往流中写入一串字节，读取时也将按写入的顺序读取一串字节，不能随机访问中间的数据
		RandomAccessFile可以从文件的任意位置进行存取（输入输出）操作 
	3)只读或者只写，每个流只能是输入流或者输出流的一种，不能同时具备两个功能，输入流只能进行读操作，对输出流只能进行写操作。
		在一个数据传输通道中，如果既要写入数据，又要读取数据，则要分别提供两个流
4.Java IO 流的对象
	1.输入字节流InputStream
		1.InputStream是所有的输入字节流的父类，它是一个抽象类
		2.ByteArrayInputStream 从 Byte数组读取数据
		  FileInputStream 从本地文件中读取数据
		3.FilterInputStream的所有子类都是装饰流（装饰模式的主角）
	流结束的判断：方法read()的返回值为-1时；readLine()的返回值为null时。
	
	2.输出字节流OutputStream
		1.OutputStream是所有的输出字节流的父类，它是一个抽象类
		2.ByteArrayOutputStream 向 Byte数组写入数据
		  FileOutputStream 向本地文件中写入数据
		3.FilterOutputStream的所有子类都是装饰流（装饰模式的主角）
5.字节流和字符流的区别
	1)字节流没有缓冲区域，是直接输出的，而字符流是输出到缓冲区的；
		因此在输出时，字节流不调用close()方法时，信息已经输出了，而字符流只有在调用close()方法关闭缓冲区时，信息才输出
	要想字符流在未关闭时输出信息，则需要手动调用flush()方法
	2)读写单位不同：字节流以字节(8bit)为单位，字符流以字符为单位
	3)处理对象不同：字节流能处理所有类型的数据(如图片，avi等)，而字符流只能处理字符类型的数据
结论：只要处理纯文本数据，就优先考虑使用字符流，除此之外都用字节流
	
6.System类对IO的支持
	  System.in（标准输入），通常代表键盘输入。
	  System.out（标准输出）：通常写往显示器。
	  System.err（标准错误输出）：通常写往显示器。
	
	
	
	